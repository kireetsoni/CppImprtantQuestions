#include <iostream>
using namespace std;
class Node
{
public:
    int data;
    Node *next;

    // Constructor
    Node(int d)
    {
        this->data = d;
        this->next = NULL;
    }
};

// Insert A Node into Head
void insertAtHead(Node *&head, int d)
{
    // New Node Create
    Node *temp = new Node(d);
    temp->next = head;
    head = temp;
}

Node* floydDetectLoop(Node* head)
{
    if(head==NULL)
    return NULL;

    Node* slow = head;
    Node* fast = head;

    while (slow!=NULL && fast!=NULL)
    {
        fast = fast->next;
        if(fast!=NULL)
        {
            fast=fast->next;
        }

        slow = slow->next;

        if(slow==fast)
        {
            cout<<"Present in :"<<slow->data<<endl;
            return slow;
        }
        return NULL;
    }
}

void traverseNode(Node *&head)
{
    Node *temp = head;

    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main()
{
    Node *node = new Node(10);
    Node *head = node;

    insertAtHead(head, 4);
    insertAtHead(head, 3);
    insertAtHead(head, 1);
    insertAtHead(head, 2);
    if(floydDetectLoop(head)!=NULL)
    cout<<"Found"<<endl;
    else
    cout<<"Not Found"<<endl;
}
