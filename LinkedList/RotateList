#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:

    int data;
    Node* next;

    // Constructor
    Node(int d)
    {
        this->data = d;
        this->next = NULL;
    }
};

void insertAtHead(Node* &head, int d)
{
    Node* temp = new Node(d);
    temp->next = head;
    head = temp;
}

Node* rotate(Node* &head, int k)
{
    if(head == NULL)
    return head;

    int len = 1;
    Node* temp = head;

// Calculate length of linked list
    while(temp->next != NULL)
    {
        temp = temp->next;
        len += 1;
    }

    // If k is greater than k 
    if(len < k)
    {
        k = k%len;
    }
    k = len-k;

    // Number of rotations are same as len so no change in LL
    if(k == len || k == 0)
    {
        return head;
    }

    int cnt = 1;
    Node* current = head;

    while(cnt < k && current != NULL)
    {
        current = current->next;
        cnt += 1;
    }

    if(current == NULL)
    {
        return head;
    }

    // Changing pointers
    temp->next = head;
    head = current->next;
    current->next = NULL;

    return head;
}

void traverseNode(Node* &head)
{
    Node* temp = head;
    while(temp != NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int main()
{
    Node* node = new Node(2);
    Node* head = node;

    insertAtHead(head,3);
    insertAtHead(head,4);
    insertAtHead(head,5);
    insertAtHead(head,6);
    insertAtHead(head,7);
    insertAtHead(head,8);
    insertAtHead(head,9);
    traverseNode(head);
    cout<<endl;
    cout<<endl;

    head = rotate(head,3);
    traverseNode(head);
}
